
    Data: X0( valeur initiale ); p = 1 (ordre racine),
         eps(precision), k(iteration);
    do
    {
        k = k+1
        if k>4 then
                p = E(1/1-( (ddf*df) / (f*f) ))
        endif
        Xk1 = Xk - p(f(Xk) / df(Xk))
    } while (|Xk1 - Xk| > eps);

    Data:   X0( valeur initiale ); p = 1 (ordre racine), 
            eps(precision), k(iteration);
    do
    {
        k = k+1
        Xk1 = Xk - p(f(Xk) / df(Xk))
    } while (|Xk1 - Xk| > eps);



//f(x)
double f(double x) {
  return x*x*x - 3*x*x + 3*x -1;
}

// df
double df(double x){
    return 3*x*x - 6*x +3;
}

double ddf(double x){
    return 3*x*x - 6*x +3;
}






double x0(0.0),x1(1.0),x2(2.0),x3(0.0);
long i(0),i_max(50);
double eps(1.e-15),dx(1.0);

double f(double);

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);

  delay(5000); // le temps de se placer dans la console s√©rie !
  do{
    i++;
    x3=(f(x0)*(x1*x1-x2*x2)+f(x1)*(x2*x2-x0*x0)+f(x2)*(x0*x0-x1*x1))/(2.*f(x0)*(x1-x2)+2.*f(x1)*(x2-x0)+2.*f(x2)*(x0-x1));
    dx=x2-x3;
    x0=x1;
    x1=x2;
    x2=x3;
    Serial.print("iteration : ");
    Serial.print(i);
    Serial.print(" | ");
    Serial.println(x3,19);
  }while((i<i_max)&&(fabs(dx)>eps));
}