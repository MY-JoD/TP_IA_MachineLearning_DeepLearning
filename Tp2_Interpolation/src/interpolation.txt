#include <Arduino.h>

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

Adafruit_SSD1306 afficheur(SCREEN_WIDTH,SCREEN_HEIGHT,&Wire,-1);

int couleur=1; // couleur WHITE
float max=0.,min=0.;
float max_h7=0.,min_h7=0.;
float max_h8=0.,min_h8=0.;
// d√©clarations pour Clenshaw
#define N 9
int n=5;
float c[N]={0.,0.,0.,2.,1.,-1.,0.,1.,3.}; // ici H5(x) sortira de ce code
float u[N+2]={0.};

float H[N]={1.};
float y_h7[SCREEN_WIDTH]={0.};
float y_h8[SCREEN_WIDTH]={0.};

float y[SCREEN_WIDTH]={0.};   // la fonction a tracer

float clenshaw(float x);
void calcule_y(float x1,float x2);
void max_min();

void affiche_courbe(float x1,float x2);

void setup() {
  Serial.begin(115200);
  if(!afficheur.begin(SSD1306_SWITCHCAPVCC,0x3C)){
    Serial.println(F("SSD allocation failed"));
    for(;;);
  }
  delay(2000);
  afficheur.clearDisplay();
  afficheur.setTextSize(1);
  afficheur.setTextColor(WHITE);
  afficheur.setCursor(0,10);
  afficheur.println("ECE-CLENSHAW !");
  afficheur.display();
  delay(4000);

  afficheur.clearDisplay();
  afficheur.display();


  affiche_courbe(-2.,2.);
  afficheur.display();
  delay(2000);

}

void loop() {

}

void Hn(float x)
{
  H[1] = 2*x;
 for (int k = 2; k < N ; k++)
 {
   H[k] = 2*x*H[k-1] - (2*k)*H[k-2] ;
 }

}

float clenshaw(float x)
{
 for (int k = n; k >=0 ; k--)
 {
   u[k] = c[k] + 2*x*u[k+1] - (2*k+1)*u[k+2] ;
 }
 return u[0];
}

void calcule_y(float x1,float x2)
{

  float tps = (x2-x1)/128;
  for (int i = 0; i < 128; i++)
  {
    y[i]=clenshaw(x1);
    Hn(x1);
    y_h7[i] = H[7];
    y_h8[i] = H[8];
    x1 += tps;
  }
  // return clenshaw(x1);

}

void max_min()
{

 max = y[0]; min = y[0];
 max_h7 = y[0]; min_h8 = y[0];
 max_h8 = y[0]; min_h8 = y[0];
  for (int i = 1; i < SCREEN_WIDTH; i++)
  {
    if (y[i] > max)
    {
      max = y[i];
    }
    if (y[i] < min)
    {
      min = y[i];
    }

    //Pour H7
    if (y_h7[i] > max_h7)
    {
      max_h7 = y_h7[i];
    }
    if (y_h7[i] < min_h7)
    {
      min_h7 = y_h7[i];
    }

    //Pour H8
    if (y_h8[i] > max_h8)
    {
      max_h8 = y_h8[i];
    }
    if (y_h8[i] < min_h8)
    {
      min_h8 = y_h8[i];
    }

  }

}



void affiche_courbe(float x1,float x2){
  int ordonnee=0;
  int ordonnee_h7=0;
  int ordonnee_h8=0;
  couleur=1;
  calcule_y(x1,x2);
  max_min();

  while (1)
  {
    for(int i=0;i<SCREEN_WIDTH;i++){
      ordonnee=32+(int)(32.*(y[i]-min)/(min-max)); 
      afficheur.drawPixel(i,ordonnee,couleur);      
      afficheur.display();
    }

    delay(5000);
    afficheur.clearDisplay();

    for(int i=0;i<SCREEN_WIDTH;i++){
      ordonnee_h7=32+(int)(32.*(y_h7[i]-min_h7)/(min_h7-max_h7));    
      afficheur.drawPixel(i,ordonnee_h7,couleur);
      afficheur.display();
    }

    delay(5000);
    afficheur.clearDisplay();

    for(int i=0;i<SCREEN_WIDTH;i++){
      ordonnee_h8=32+(int)(32.*(y_h8[i]-min_h8)/(min_h8-max_h8)); 
      afficheur.drawPixel(i,ordonnee_h8,couleur);
      afficheur.display();
    }

    delay(5000);
    afficheur.clearDisplay();


  }

    afficheur.display();
    delay(100);
}